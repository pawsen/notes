:PROPERTIES:
:ID:       ece9df65-2bad-4d25-abf2-c54b5b489ca3
:END:
#+title: linux
* xkb
https://github.com/MaskRay/Config/tree/master/home/.config/xkb
https://github.com/MaskRay/Config/blob/master/home/.config/systemd/user/xcape.service
* ssh
** socks tunnel
ssh -D 8080 -fNq server
-q: quit mode
-f: fork to background
-N: do not execute background commands
-C: compress data in the tunnel; save bandwidth

*** kill it
pkill ssh - brute force
ps -ef | grep $PORT - kill only the relevant connection
Use [[https://unix.stackexchange.com/a/164656][control socket]] (-S)

Or run the tunnel in ~tmux~ without =-f=
* regex
** flat structure, ie. remove all files to same top-dir

We have
#+begin_example
/dir1
    /dir2
       |
        --- file1
       |
        --- file2
#+end_example

#+begin_src sh
mkdir bak
fd --type f . -X mv -t bak/ --backup=t
cd bak
ls *~ | sed 's/\(.*\)\(\.[^~]*\)\(\.~[0-9]*~\)$/mv & \1\3\2/' | sh
#+end_src

example sed https://sed.js.org/?gist=01355b3bab8aacb8f1294f84588aafd2

explanation:
#+begin_export ascii
s/regexp/replacement/
        Attempt  to match regexp against the pattern space.  If success‚Äê
        ful,  replace  that  portion  matched  with  replacement.    The
        replacement may contain the special character & to refer to that
        portion of the pattern space  which  matched,  and  the  special
        escapes  \1  through  \9  to refer to the corresponding matching
        sub-expressions in the regexp.
#+end_export

Here we have three match-groups. =(.*)= match until the first =.= and is necessary for assembling the full file name - accessed through =*= (or equivalent =\1\2\3=). Thus we have the replacement part
: mv * \1 \3 \2
example
: mv image1.jpg.~1~ image1.~1~.jpg
and pipe that to =sh=


Note: sed uses basic regular expression (BRE) which requires escaping of =(), {}=. To get resemblance to "normal" regex use ERE (Extended Regular Expressions): =-E, -r, --regexp-extended=
https://en.wikipedia.org/wiki/Regular_expression#POSIX_basic_and_extended

The wiki-articles says that =\n= (backreference) is only supported in ~BRE~ but looking at the gist below it seems to still work
https://regex101.com/r/RC5MM5/1
https://sed.js.org/?gist=3c3f6eceb55193fc81f19609558ae73c

#+begin_src sh
echo "image.jpeg.~222~" | sed 's/\(.*\)\(\.[^~]*\)\(\.~[0-9]*~\)/& \1\3\2/'
echo "image.jpeg.~222~" | sed -E 's/(.*)(\.[^~]*)(\.~[0-9]*~)/& \1\3\2/'
#+end_src
